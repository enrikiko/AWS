AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create lambda function with writing permition to S3 bucket

Resources:

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: api-cortijo-camera
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: upload

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: v0

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: api-key-cortijo-camera
      Description: Api key for camera cortijo
      Enabled: true

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - ApiGatewayDeployment
      - ApiGatewayRestApi
      - ApiGatewayStage
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: v0
      Quota:
        Limit: 2000
        Period: MONTH
      Throttle:
        BurstLimit: 10
        RateLimit: 10
      UsagePlanName: usage plan for cortijo camera

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan


  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json, boto3, os, base64, io, time
          from botocore.exceptions import NoCredentialsError
          from datetime import date
          BUCKET_NAME = "s3-cortijo-camera"
          def decode_file(encoded_file):
              decoded_file = base64.b64decode(encoded_file)
              return decoded_file
          def upload_file(file):
              global BUCKET_NAME
              s3 = boto3.client('s3')
              fo = io.BytesIO(file)
              data = date.today()
              day = str(data.strftime("%d"))
              month = str(data.strftime("%m"))
              year = str(data.strftime("%y"))
              ts = str(time.time())
              key="porch/"+year+"/"+month+"/"+day+"/"+ts+".jpg"
              try:
                  s3.put_object(Body=file, Bucket=BUCKET_NAME, Key=key)
                  print("Upload Successful")
                  return "Upload"
              except FileNotFoundError:
                  print("The file was not found")
                  return "Error"
              except NoCredentialsError:
                  print("Credentials not available")
                  return "Error"
          def lambda_handler(event, context):
              data =  event["body"]
              return {
                  'statusCode': 200,
                  'body': upload_file(decode_file(data))
              }
      Description: AWS Lambda function
      FunctionName: lambda_cortijo_camera
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.7
      Timeout: 60

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

  S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: policy_cortijo_s3_putobject
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: S3Bucket
                  - /*
      Roles:
        - !Ref LambdaIamRole
        - !Ref ApiGatewayIamRole

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3-cortijo-camera