AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create lambda function with writing permition to DNS

Resources:

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: api-cortijo-dns
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: update

  ApiGatewayResourceGet:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: getIp

  ApiGatewayMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionSetIp.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionGetIp.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResourceGet
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: v0

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodGet
      - ApiGatewayMethodPost
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: api-key-cortijo-dns
      Description: Api key for dns cortijo
      Enabled: true

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - ApiGatewayDeployment
      - ApiGatewayRestApi
      - ApiGatewayStage
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: v0
      Quota:
        Limit: 2000
        Period: MONTH
      Throttle:
        BurstLimit: 10
        RateLimit: 10
      UsagePlanName: usage plan for cortijo dns

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource:
                  - !GetAtt LambdaFunctionGetIp.Arn
                  - !GetAtt LambdaFunctionSetIp.Arn

  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: table-ip-cortijo
      AttributeDefinitions:
        - AttributeName: Place
          AttributeType: S
      KeySchema:
        - AttributeName: Place
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaFunctionSetIp:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: s3-lambda-cortijo
        S3Key: packages/dns_set_ip/dns_set_ip.zip
      Description: AWS Lambda function
      FunctionName: lambda_cortijo_dns_set_ip
      Handler: dns_set_ip.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.7
      Timeout: 60

  LambdaFunctionGetIp:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: s3-lambda-cortijo
        S3Key: packages/dns_set_ip/dns_get_ip.zip
      Description: AWS Lambda function
      FunctionName: lambda_cortijo_dns_get_ip
      Handler: dns_get_ip.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.7
      Timeout: 60

  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'

  DNSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: policy_cortijo_dns
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'route53:*'
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:route53:::'
                  - '*/*'
      Roles:
        - !Ref LambdaIamRole

  DynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: policy_cortijo_dynamo
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:*'
            Resource:
              !GetAtt myDynamoDBTable.Arn
      Roles:
        - !Ref LambdaIamRole
